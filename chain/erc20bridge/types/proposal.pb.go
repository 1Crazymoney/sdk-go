// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/erc20bridge/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TokenMapping defines a mapping for cosmos denom and erc20 address.
type TokenMapping struct {
	// address of ERC20 contract token
	Erc20Address string `protobuf:"bytes,1,opt,name=erc20_address,json=erc20Address,proto3" json:"erc20_address,omitempty" yaml:"erc20_address"`
	// cosmos-native denominator to mapped to ERC20
	CosmosDenom string `protobuf:"bytes,2,opt,name=cosmos_denom,json=cosmosDenom,proto3" json:"cosmos_denom,omitempty"`
	// shows token mapping bridge enable status
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TokenMapping) Reset()         { *m = TokenMapping{} }
func (m *TokenMapping) String() string { return proto.CompactTextString(m) }
func (*TokenMapping) ProtoMessage()    {}
func (*TokenMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_725522d902d0cf82, []int{0}
}
func (m *TokenMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMapping.Merge(m, src)
}
func (m *TokenMapping) XXX_Size() int {
	return m.Size()
}
func (m *TokenMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMapping.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMapping proto.InternalMessageInfo

func (m *TokenMapping) GetErc20Address() string {
	if m != nil {
		return m.Erc20Address
	}
	return ""
}

func (m *TokenMapping) GetCosmosDenom() string {
	if m != nil {
		return m.CosmosDenom
	}
	return ""
}

func (m *TokenMapping) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// RegisterTokenMappingProposal is a gov Content type to register a token mapping
type RegisterTokenMappingProposal struct {
	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Mapping     TokenMapping `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping"`
}

func (m *RegisterTokenMappingProposal) Reset()         { *m = RegisterTokenMappingProposal{} }
func (m *RegisterTokenMappingProposal) String() string { return proto.CompactTextString(m) }
func (*RegisterTokenMappingProposal) ProtoMessage()    {}
func (*RegisterTokenMappingProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_725522d902d0cf82, []int{1}
}
func (m *RegisterTokenMappingProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterTokenMappingProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterTokenMappingProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterTokenMappingProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTokenMappingProposal.Merge(m, src)
}
func (m *RegisterTokenMappingProposal) XXX_Size() int {
	return m.Size()
}
func (m *RegisterTokenMappingProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTokenMappingProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTokenMappingProposal proto.InternalMessageInfo

func (m *RegisterTokenMappingProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RegisterTokenMappingProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RegisterTokenMappingProposal) GetMapping() TokenMapping {
	if m != nil {
		return m.Mapping
	}
	return TokenMapping{}
}

// ResetHubProposal is a gov Content type to reset hub
// when reset hub, all the bridges from previous version are derivated
type ResetHubProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HubAddress  string `protobuf:"bytes,3,opt,name=hub_address,json=hubAddress,proto3" json:"hub_address,omitempty" yaml:"hub_address"`
}

func (m *ResetHubProposal) Reset()         { *m = ResetHubProposal{} }
func (m *ResetHubProposal) String() string { return proto.CompactTextString(m) }
func (*ResetHubProposal) ProtoMessage()    {}
func (*ResetHubProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_725522d902d0cf82, []int{2}
}
func (m *ResetHubProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetHubProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetHubProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetHubProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetHubProposal.Merge(m, src)
}
func (m *ResetHubProposal) XXX_Size() int {
	return m.Size()
}
func (m *ResetHubProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetHubProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ResetHubProposal proto.InternalMessageInfo

func (m *ResetHubProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ResetHubProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ResetHubProposal) GetHubAddress() string {
	if m != nil {
		return m.HubAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenMapping)(nil), "injective.erc20bridge.v1beta1.TokenMapping")
	proto.RegisterType((*RegisterTokenMappingProposal)(nil), "injective.erc20bridge.v1beta1.RegisterTokenMappingProposal")
	proto.RegisterType((*ResetHubProposal)(nil), "injective.erc20bridge.v1beta1.ResetHubProposal")
}

func init() {
	proto.RegisterFile("injective/erc20bridge/proposal.proto", fileDescriptor_725522d902d0cf82)
}

var fileDescriptor_725522d902d0cf82 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xcf, 0xb8, 0xab, 0xab, 0x93, 0x0a, 0x32, 0x14, 0x09, 0xa2, 0x49, 0x0d, 0x1e, 0x16, 0xc4,
	0xc4, 0x5d, 0x0f, 0xc2, 0x82, 0x07, 0x8b, 0x07, 0x45, 0x05, 0x1d, 0x3c, 0x79, 0x59, 0x66, 0x92,
	0x47, 0x32, 0x36, 0xc9, 0x84, 0x99, 0x49, 0xa1, 0x1f, 0xc1, 0x5b, 0x3f, 0x82, 0x57, 0xbf, 0x49,
	0x8f, 0x3d, 0x7a, 0x2a, 0xd2, 0x5e, 0x3c, 0xf7, 0x13, 0x48, 0x33, 0x4d, 0x49, 0x2f, 0x5e, 0xbc,
	0xcd, 0xef, 0xcd, 0x7b, 0xef, 0xf7, 0x87, 0x87, 0x9f, 0x88, 0xea, 0x1b, 0x24, 0x46, 0x4c, 0x21,
	0x06, 0x95, 0x5c, 0x3e, 0xe7, 0x4a, 0xa4, 0x19, 0xc4, 0xb5, 0x92, 0xb5, 0xd4, 0xac, 0x88, 0x6a,
	0x25, 0x8d, 0x24, 0x8f, 0x0e, 0x5d, 0x51, 0xaf, 0x2b, 0x9a, 0x5e, 0x70, 0x30, 0xec, 0xe2, 0xc1,
	0x30, 0x93, 0x99, 0x6c, 0x3b, 0xe3, 0xdd, 0xcb, 0x0e, 0x85, 0x73, 0x84, 0x07, 0x5f, 0xe4, 0x04,
	0xaa, 0x8f, 0xac, 0xae, 0x45, 0x95, 0x91, 0x57, 0xf8, 0x6e, 0x3b, 0x7d, 0xcd, 0xd2, 0x54, 0x81,
	0xd6, 0x1e, 0x1a, 0xa1, 0xf3, 0x3b, 0x63, 0x6f, 0xbb, 0x0a, 0x86, 0x33, 0x56, 0x16, 0x57, 0xe1,
	0xd1, 0x77, 0x48, 0x07, 0x2d, 0x7e, 0x6d, 0x21, 0x79, 0x8c, 0x07, 0x89, 0xd4, 0xa5, 0xd4, 0xd7,
	0x29, 0x54, 0xb2, 0xf4, 0x6e, 0xec, 0xa6, 0xa9, 0x6b, 0x6b, 0x6f, 0x76, 0x25, 0xe2, 0xe1, 0x33,
	0xa8, 0x18, 0x2f, 0x20, 0xf5, 0x4e, 0x46, 0xe8, 0xfc, 0x36, 0xed, 0xe0, 0xd5, 0xe9, 0x9f, 0x1f,
	0x01, 0x0a, 0x7f, 0x22, 0xfc, 0x90, 0x42, 0x26, 0xb4, 0x01, 0xd5, 0x97, 0xf6, 0x69, 0x6f, 0x97,
	0x0c, 0xf1, 0x4d, 0x23, 0x4c, 0x01, 0x56, 0x1a, 0xb5, 0x80, 0x8c, 0xb0, 0x9b, 0x82, 0x4e, 0x94,
	0xa8, 0x8d, 0x90, 0x55, 0x47, 0xdc, 0x2b, 0x91, 0xf7, 0xf8, 0xac, 0xb4, 0xab, 0x5a, 0x62, 0xf7,
	0xf2, 0x69, 0xf4, 0xcf, 0xc8, 0xa2, 0x3e, 0xfb, 0xf8, 0x74, 0xb1, 0x0a, 0x1c, 0xda, 0x6d, 0xd8,
	0x6b, 0xfd, 0x8e, 0xf0, 0x3d, 0x0a, 0x1a, 0xcc, 0xdb, 0x86, 0xff, 0xb7, 0xbe, 0x97, 0xd8, 0xcd,
	0x1b, 0x7e, 0x08, 0xfe, 0xa4, 0x0d, 0xfe, 0xfe, 0x76, 0x15, 0x10, 0x1b, 0x7c, 0xef, 0x33, 0xa4,
	0x38, 0x6f, 0xf8, 0x3e, 0x74, 0xab, 0x65, 0x3c, 0x59, 0xac, 0x7d, 0xb4, 0x5c, 0xfb, 0xe8, 0xf7,
	0xda, 0x47, 0xf3, 0x8d, 0xef, 0x2c, 0x37, 0xbe, 0xf3, 0x6b, 0xe3, 0x3b, 0x5f, 0x3f, 0x67, 0xc2,
	0xe4, 0x0d, 0x8f, 0x12, 0x59, 0xc6, 0xef, 0x3a, 0xc7, 0x1f, 0x18, 0xd7, 0xf1, 0xc1, 0xff, 0xb3,
	0x44, 0x2a, 0xe8, 0xc3, 0x9c, 0x89, 0x2a, 0x2e, 0x65, 0xda, 0x14, 0xa0, 0x8f, 0xae, 0xce, 0xcc,
	0x6a, 0xd0, 0xfc, 0x56, 0x7b, 0x3e, 0x2f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x16, 0x49, 0x04,
	0xd6, 0x9b, 0x02, 0x00, 0x00,
}

func (this *TokenMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenMapping)
	if !ok {
		that2, ok := that.(TokenMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Erc20Address != that1.Erc20Address {
		return false
	}
	if this.CosmosDenom != that1.CosmosDenom {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (this *RegisterTokenMappingProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterTokenMappingProposal)
	if !ok {
		that2, ok := that.(RegisterTokenMappingProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Mapping.Equal(&that1.Mapping) {
		return false
	}
	return true
}
func (this *ResetHubProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetHubProposal)
	if !ok {
		that2, ok := that.(ResetHubProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.HubAddress != that1.HubAddress {
		return false
	}
	return true
}
func (m *TokenMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CosmosDenom) > 0 {
		i -= len(m.CosmosDenom)
		copy(dAtA[i:], m.CosmosDenom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.CosmosDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Erc20Address) > 0 {
		i -= len(m.Erc20Address)
		copy(dAtA[i:], m.Erc20Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Erc20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterTokenMappingProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterTokenMappingProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterTokenMappingProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mapping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetHubProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetHubProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetHubProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HubAddress) > 0 {
		i -= len(m.HubAddress)
		copy(dAtA[i:], m.HubAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.HubAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.CosmosDenom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *RegisterTokenMappingProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.Mapping.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *ResetHubProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.HubAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterTokenMappingProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterTokenMappingProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterTokenMappingProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetHubProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetHubProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetHubProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HubAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
